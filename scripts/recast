#!/usr/bin/env -S deno run -q --allow-read

import * as toml from "https://deno.land/std@0.152.0/encoding/toml.ts";
import * as yaml from "https://deno.land/std@0.152.0/encoding/yaml.ts";
import * as flags from "https://deno.land/std@0.152.0/flags/mod.ts";
import { readAll } from "https://deno.land/std@0.152.0/streams/conversion.ts";
import { z } from "https://deno.land/x/zod@v3.18.0/mod.ts";

// Constants and globals
const F_JSON = "json";
const F_YAML = "yaml";
const F_TOML = "toml";
const FORMATS = [F_JSON, F_YAML, F_TOML];
const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

const parsedFlags = flags.parse(Deno.args);

// Help
if (parsedFlags.h || parsedFlags.help) {
  console.table({
    "--from": {
      description: "Input format",
      type: FORMATS,
      default: F_JSON,
    },
    "--to": {
      description: "Output format",
      type: FORMATS,
      default: F_JSON,
    },
    "-o": { description: "Output file", type: "string", default: "[STDOUT]" },
    "": { description: "Input file", type: "string", default: "[STDIN]" },
  });
  Deno.exit();
}
// Validate commandline arguments
const args = z
  .object({
    // @ts-ignore: This file is treated as JS, but linted as TypeScript...
    from: z.enum(FORMATS).default(F_JSON),
    // @ts-ignore: This file is treated as JS, but linted as TypeScript...
    to: z.enum(FORMATS).default(F_JSON),
    o: z.optional(z.string()),
    _: z.array(z.string()).max(1),
  })
  .parse(parsedFlags);

const inputFile = args._[0] ? await Deno.open(args._[0]) : Deno.stdin;
const serializedInput = await readAll(inputFile);
inputFile.close();
const serializedInputString = textDecoder.decode(serializedInput);

let obj;
if (args.from === F_YAML) {
  obj = yaml.parse(serializedInputString);
} else if (args.from === F_TOML) {
  obj = toml.parse(serializedInputString);
} else if (args.from === F_JSON) {
  obj = JSON.parse(serializedInputString);
}

let serializedOutputString;
if (args.to === F_YAML) {
  serializedOutputString = yaml.stringify(obj);
} else if (args.to === F_TOML) {
  serializedOutputString = toml.stringify(obj);
} else if (args.to === F_JSON) {
  serializedOutputString = JSON.stringify(obj);
}
const serializedOutput = textEncoder.encode(serializedOutputString);
const outputFile = args.o ? await Deno.open(args.o) : Deno.stdout;
await outputFile.write(serializedOutput);
outputFile.close();

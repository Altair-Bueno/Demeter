#!/usr/bin/env bash

# Shell configuration
set -euo pipefail
shopt -s nullglob globstar

# Imports
source "${DEMETER:-$HOME/.demeter}/submodules/bash-progress-bar/progress-bar.bash"

# Constants
SYSUPGRADE_MAKEFILE="$DEMETER/scripts/sysupgrade.make"
# TODO replace with --print-targets when possible
SYSUPGRADE_AVAILABLE_TARGETS=(brew rust arch python node flatpak sysconfig)

function command-exists {
    command -v "$1" >/dev/null 2>&1
}

function fatal {
    echo "$@" >&2
    exit 1
}

function clear-last-line {
    printf "\r\033[K"
}

function draw-progress-bar {
    local step="$1" total="$2"

    progress-bar -c "$step" -t "$total" -r -p
}


function main {
    local targets=() OPTIN OPTOUT opt

    while getopts "ht:" opt; do
        case "$opt" in
            h)
                echo "Usage: $0 [-h] [-t target] ..."
                echo "Available targets: ${SYSUPGRADE_AVAILABLE_TARGETS[*]}"
                exit 0
            ;;
            t)
                if [[ ! " ${SYSUPGRADE_AVAILABLE_TARGETS[*]} " =~ " ${OPTARG} " ]]; then
                    fatal "Unknown target: $target"
                else
                    targets+=("$OPTARG")
                fi
            ;;
            *)
                fatal "Invalid option: -$OPTARG"
            ;;
        esac
    done

    if [[ "${#targets[@]}" -eq 0 ]]; then
        command-exists "brew" && targets+=(brew)
        command-exists "rustup" && targets+=(rust)
        command-exists "yay" && targets+=(arch)
        command-exists "python3" && targets+=(python)
        command-exists "node" && targets+=(node)
        command-exists "flatpack" && targets+=(flatpak)
        [[ -n "${DEMETER:+x}" ]] && targets+=(sysconfig)
    fi


    declare -g STARTED_JOBS=0 FINISHED_JOBS=0

    # Set signal handlers
    trap 'clear-last-line && draw-progress-bar "$FINISHED_JOBS" "$STARTED_JOBS"' SIGWINCH

    local line
    while read -r line; do
        case "$line" in
            +*) (( STARTED_JOBS+=1 )) ;;
            -*) (( FINISHED_JOBS+=1 )) ;;
            *)
                clear-last-line
                printf "%s\n" "$line" ;;
        esac

        clear-last-line
        # We need to connect stdin so progress-bar can read the terminal size
        draw-progress-bar "$FINISHED_JOBS" "$STARTED_JOBS" <&1
    done < <(make -f "$SYSUPGRADE_MAKEFILE" -j "${targets[@]}")
    trap - SIGWINCH SIGINT SIGTERM
}

main "$@"

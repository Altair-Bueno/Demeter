#!/usr/bin/env -S deno run -q --allow-read

import * as toml from "https://deno.land/std@0.152.0/encoding/toml.ts";
import * as yaml from "https://deno.land/std@0.152.0/encoding/yaml.ts";
import * as flags from "https://deno.land/std@0.152.0/flags/mod.ts";
import { readAll } from "https://deno.land/std@0.152.0/streams/conversion.ts";
import { z } from "https://deno.land/x/zod@v3.18.0/mod.ts";

const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

const ArgsValidator = z.object({
  from: z.enum(["yaml", "json", "toml"]).default("json"),
  to: z.enum(["yaml", "json", "toml"]).default("json"),
  in: z.optional(z.string()),
  out: z.optional(z.string()),
});

const args = ArgsValidator.parse(flags.parse(Deno.args));

let serializedInput;
if (args.in) {
  const file = await Deno.open(args.in);
  serializedInput = await readAll(file);
  file.close();
} else {
  serializedInput = await readAll(Deno.stdin);
}
const serializedInputString = textDecoder.decode(serializedInput);

let obj;
if (args.from === "yaml") {
  obj = yaml.parse(serializedInputString);
} else if (args.from === "toml") {
  obj = toml.parse(serializedInputString);
} else if (args.from === "json") {
  obj = JSON.parse(serializedInputString);
}

let serializedOutputString;
if (args.to === "yaml") {
  serializedOutputString = yaml.stringify(obj);
} else if (args.to === "toml") {
  serializedOutputString = toml.stringify(obj);
} else if (args.to === "json") {
  serializedOutputString = JSON.stringify(obj);
}
const serializedOutput = textEncoder.encode(serializedOutputString);

if (args.out) {
  const file = await Deno.open(args.out);
  serializedInput = await file.write(serializedOutput);
  file.close();
} else {
  await Deno.stdout.write(serializedOutput);
}

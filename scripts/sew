#!/usr/bin/env -S python3 -sS -OO
from __future__ import annotations

from dataclasses import dataclass, field
from itertools import chain
from os import getenv, remove
from pathlib import Path
from subprocess import run
from sys import argv, stderr, stdin, stdout

from tomllib import load

_XDG_DATA_HOME = Path(getenv("XDG_DATA_HOME", "~/.config")).expanduser().resolve()
SETTINGS_PATH = _XDG_DATA_HOME / "sew.toml"


@dataclass
class Settings:
    book: str = "Book"
    suffix: str = ".pdf"
    cleanup: list = field(default_factory=list)
    pandoc: dict[str, object] = field(default_factory=dict)
    exec: dict[str, object] = field(default_factory=dict)

    @staticmethod
    def from_file(path: Path) -> Settings:
        try:
            with open(path, "rb") as f:
                return Settings(**load(f))
        except FileNotFoundError:
            return Settings()


def format_arg(k: str, v: object) -> list[str]:
    if isinstance(v, list):
        return [f"--{k}={value}" for value in v]
    elif isinstance(v, bool) and v:
        return [f"--{k}"]
    elif isinstance(v, dict):
        return [f"--{k}={a}={b}" for a, b in v.items()]
    else:
        return [f"--{k}={v}"]


def main(arguments: list[str], settings: Settings):
    if len(arguments) == 1:
        executable = Path(arguments[0]).name
        raise SystemExit(f"USAGE: {executable} FILES... [PANDOC_ARGS...]")

    output_name = arguments[1] if len(arguments) == 2 else settings.book
    output_path = Path(output_name).with_suffix(settings.suffix)

    exec_args = chain(
        ["pandoc"],
        format_arg("output", output_path),
        chain.from_iterable(format_arg(k, v) for k, v in settings.pandoc.items()),
        arguments[1:],
    )
    print(output_path)
    run(list(exec_args), **settings.exec, stderr=stderr, stdout=stdout, stdin=stdin)

    for path in settings.cleanup:
        remove(path)


if __name__ == "__main__":
    import gc

    gc.disable()
    main(argv, Settings.from_file(SETTINGS_PATH))

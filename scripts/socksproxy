#!/usr/bin/env -S python3 -sS -OO
from __future__ import annotations

from argparse import ArgumentParser
from dataclasses import asdict, dataclass
from json import dump, load, loads
from os import environ, kill, name, remove
from os.path import exists
from pathlib import Path
from signal import SIGKILL
from subprocess import DEVNULL, Popen

TMP_DIR = Path(environ["TEMP"] if name == "nt" else "/tmp")
DEFAULT_LOCK_FILE = TMP_DIR / "socksproxy.lock"
DEFAULT_LOG_FILE = TMP_DIR / "socksproxy.log"
DEFAULT_FORWARD_ADDR = "127.0.0.1"
DEFAULT_PORT = 1080


@dataclass
class LockPayload:
    remote: str
    pid: int
    socket_addr: str


def start(remote: str, port: int, lock_file: Path, forward_addr: str, **_):
    if exists(lock_file):
        raise FileExistsError(f"Lock file already exists: {lock_file}")
    cmd = ["ssh", "-D", f"{forward_addr}:{port}", remote, "tail -f /dev/null"]
    with open(DEFAULT_LOG_FILE, "w") as log_file:
        process = Popen(cmd, stdin=DEVNULL, stdout=log_file, stderr=log_file)

    payload = LockPayload(
        pid=process.pid, socket_addr=f"socks5://{forward_addr}:{port}", remote=remote
    )

    with open(lock_file, "wt") as lock:
        dump(asdict(payload), lock, indent=2)

    print(payload.socket_addr)


def status(lock_file: Path, **_):
    try:
        with open(lock_file) as lock:
            lock_content = lock.read()
        payload = LockPayload(**loads(lock_content))

        # Signal 0 checks if a process is still running
        kill(payload.pid, 0)
        print(lock_content)
    except ProcessLookupError as e:
        remove(lock_file)
        raise SystemExit("Socket was killed") from e
    except Exception as e:
        raise SystemExit("Not running") from e


def stop(lock_file: Path, **_):
    with open(lock_file, "rt") as lock:
        payload = LockPayload(**load(lock))
    remove(lock_file)

    kill(payload.pid, SIGKILL)


class SocksProxyArgumentParser(ArgumentParser):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, description="Manages a SOCKS5 proxy", **kwargs)
        self.add_argument(
            "--lock_file",
            type=Path,
            default=DEFAULT_LOCK_FILE,
            metavar="FILE",
            help="location of the lock file",
        )
        subparsers = self.add_subparsers(parser_class=ArgumentParser, required=True)

        start_parser = subparsers.add_parser("start")
        start_parser.add_argument(
            "remote",
            type=str,
            help="remote address to perform SOCKS5 proxy",
        )
        start_parser.add_argument(
            "--forward_addr",
            type=str,
            metavar="ADDR",
            default=DEFAULT_FORWARD_ADDR,
            help="forward address",
        )
        start_parser.add_argument(
            "-p",
            "--port",
            type=int,
            nargs=1,
            default=DEFAULT_PORT,
            help="port used for redirection",
            dest="port",
        )
        start_parser.set_defaults(command=start)

        stop_parser = subparsers.add_parser("stop")
        stop_parser.set_defaults(command=stop)

        status_parser = subparsers.add_parser("status")
        status_parser.set_defaults(command=status)


def main():
    args = SocksProxyArgumentParser().parse_args()
    args = vars(args)
    args["command"](**args)


if __name__ == "__main__":
    import sys, gc
    sys.tracebacklimit = 0
    gc.disable()
    
    main()

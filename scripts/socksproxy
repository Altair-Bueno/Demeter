#!/usr/bin/env python3 -sS -OO
from argparse import ArgumentParser
from dataclasses import dataclass, asdict
from pathlib import Path
import os
import json

DEFAULT_LOCK_FILE = Path("/tmp/socksproxy.lock")
DEFAULT_LOG_FILE = Path("/tmp/socksproxy.log")
DEFAULT_FORWARD_ADDR = "127.0.0.1"
DEFAULT_PORT = 1080

@dataclass
class LockPayload:
    remote: str
    pid: int
    socket_addr: str

    def as_dict(self) -> dict[str, object]:
        return asdict(self)

def start(remote: str, port: int, lock_file: Path, forward_addr: str): 
    if os.path.exists(lock_file):
        raise FileExistsError(f"Lock file already exists: {lock_file}")
    
    with open(DEFAULT_LOG_FILE, "w") as log_file:
        from subprocess import Popen, DEVNULL
        
        cmd = ["ssh", "-D", f"{forward_addr}:{port}", remote, "tail -f /dev/null"]
        process = Popen(cmd, stdin=DEVNULL, stdout=log_file, stderr=log_file)
    
    payload = LockPayload(pid=process.pid, socket_addr=f"socks5://{forward_addr}:{port}", remote=remote)

    with open(lock_file, "wt") as lock:
        json.dump(payload.as_dict(), lock, indent=2)

    print(payload.socket_addr)

def status(lock_file: Path):
    try:
        with open(lock_file) as lock:
            msg = lock.read()
    except:
        msg = f"Missing lock file at {lock_file}"
    
    print(msg)

def stop(lock_file: str):
    with open(lock_file, "rt") as lock:
        obj = json.load(lock)
    payload = LockPayload(**obj)
    os.remove(lock_file)

    from signal import SIGKILL
    os.kill(payload.pid, SIGKILL)

class SocksProxyArgumentParser(ArgumentParser):
    def __init__(self, *args,**kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.add_argument(
            "--lock_file",
            type=Path,
            default=DEFAULT_LOCK_FILE,
            metavar="FILE",
            help="location of the lock file", 
        )
        subparsers = self.add_subparsers(parser_class=ArgumentParser, required=True)
        
        start_parser = subparsers.add_parser("start")
        start_parser.add_argument(
            "remote",
            type=str,
            help="remote address to perform SOCKS5 proxy", 
        )
        start_parser.add_argument(
            "--forward_addr",
            type=str,
            metavar="ADDR",
            default=DEFAULT_FORWARD_ADDR,
            help="forward address", 
        )
        start_parser.add_argument(
            "-p", 
            "--port", 
            type=int,
            nargs=1,
            default=DEFAULT_PORT, 
            help="port used for redirection", 
            dest="port",
        )
        start_parser.set_defaults(func=start)
        
        stop_parser = subparsers.add_parser("stop")
        stop_parser.set_defaults(func=stop)

        status_parser = subparsers.add_parser("status")
        status_parser.set_defaults(func=status)


if __name__ == '__main__':
    from sys import argv
    executable = Path(argv[0])
    parser = SocksProxyArgumentParser(prog=executable.name, description='Manages a SOCKS5 proxy')
    ns = parser.parse_args()
    
    func = ns.func
    args = vars(ns)
    del args["func"]
    func(**args)
